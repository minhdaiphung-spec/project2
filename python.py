import streamlit as st
import pandas as pd
import numpy as np
from google import genai
from google.genai.errors import APIError
import json
import math

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App ƒê√°nh Gi√° Ph∆∞∆°ng √Ån Kinh Doanh",
    layout="wide"
)

st.title("·ª®ng D·ª•ng ƒê√°nh Gi√° Ph∆∞∆°ng √Ån Kinh Doanh üí∞")
st.markdown("S·ª≠ d·ª•ng AI ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin, x√¢y d·ª±ng d√≤ng ti·ªÅn v√† ƒë√°nh gi√° hi·ªáu qu·∫£ d·ª± √°n.")

# --- ƒê·ªäNH NGHƒ®A SCHEMA JSON CHO AI TR√çCH XU·∫§T D·ªÆ LI·ªÜU ---
FINANCIAL_SCHEMA = {
    "type": "OBJECT",
    "properties": {
        "initial_investment": {"type": "NUMBER", "description": "T·ªïng v·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (V·ªën ƒë·∫ßu t∆∞) t·∫°i nƒÉm T=0. ƒê∆°n v·ªã: Tri·ªáu VNƒê."},
        "project_lifespan": {"type": "INTEGER", "description": "D√≤ng ƒë·ªùi d·ª± √°n theo nƒÉm (NƒÉm)."},
        "annual_revenue": {"type": "NUMBER", "description": "Doanh thu h√†ng nƒÉm d·ª± ki·∫øn (Gi·∫£ ƒë·ªãnh kh√¥ng ƒë·ªïi). ƒê∆°n v·ªã: Tri·ªáu VNƒê."},
        "annual_cost": {"type": "NUMBER", "description": "Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm d·ª± ki·∫øn (Ch∆∞a bao g·ªìm thu·∫ø, gi·∫£ ƒë·ªãnh kh√¥ng ƒë·ªïi). ƒê∆°n v·ªã: Tri·ªáu VNƒê."},
        "wacc": {"type": "NUMBER", "description": "Chi ph√≠ s·ª≠ d·ª•ng v·ªën b√¨nh qu√¢n (WACC) hay t·ª∑ l·ªá chi·∫øt kh·∫•u, d∆∞·ªõi d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 0.12 cho 12%)."},
        "tax_rate": {"type": "NUMBER", "description": "Thu·∫ø su·∫•t thu nh·∫≠p doanh nghi·ªáp, d∆∞·ªõi d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 0.2 cho 20%)."}
    },
    "required": ["initial_investment", "project_lifespan", "annual_revenue", "annual_cost", "wacc", "tax_rate"]
}

# --- KH·ªûI T·∫†O STATE ---
if "extracted_data" not in st.session_state:
    st.session_state.extracted_data = None
if "cash_flow_df" not in st.session_state:
    st.session_state.cash_flow_df = None
if "metrics" not in st.session_state:
    st.session_state.metrics = None

# --- H√ÄM 1: L·ªåC D·ªÆ LI·ªÜU B·∫∞NG AI (TR·∫¢ V·ªÄ JSON C√ì C·∫§U TR√öC) ---
def extract_data_with_ai(text_content, api_key):
    """G·ª≠i n·ªôi dung vƒÉn b·∫£n t·ªõi Gemini ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu t√†i ch√≠nh theo JSON Schema."""
    try:
        client = genai.Client(api_key=api_key)
        
        system_prompt = f"""B·∫°n l√† m·ªôt chuy√™n gia tr√≠ch xu·∫•t d·ªØ li·ªáu t√†i ch√≠nh. H√£y ƒë·ªçc k·ªπ n·ªôi dung ph∆∞∆°ng √°n kinh doanh sau v√† tr√≠ch xu·∫•t 6 th√¥ng s·ªë sau: V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (Initial Investment), D√≤ng ƒë·ªùi d·ª± √°n (Project Lifespan), Doanh thu h√†ng nƒÉm (Annual Revenue), Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm (Annual Cost), WACC (WACC), v√† Thu·∫ø su·∫•t (Tax Rate).
        ƒê·∫£m b·∫£o ƒë·∫ßu ra c·ªßa b·∫°n l√† m·ªôt ƒë·ªëi t∆∞·ª£ng JSON ho√†n ch·ªânh, tu√¢n th·ªß ch√≠nh x√°c Schema ƒë√£ cho. ƒê∆°n v·ªã ti·ªÅn t·ªá l√† Tri·ªáu VNƒê v√† c√°c t·ª∑ l·ªá (WACC, Thu·∫ø) ph·∫£i ·ªü d·∫°ng th·∫≠p ph√¢n.
        N·ªôi dung Ph∆∞∆°ng √°n Kinh doanh: {text_content}"""

        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=[],
            config=genai.types.GenerateContentConfig(
                response_mime_type="application/json",
                response_schema=FINANCIAL_SCHEMA,
                system_instruction=system_prompt
            )
        )
        
        # Parse JSON output
        json_string = response.text.strip().strip('`')
        if json_string.startswith('json'):
            json_string = json_string[4:].strip()
        
        return json.loads(json_string)

    except APIError as e:
        st.error(f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}")
        return None
    except json.JSONDecodeError:
        st.error("L·ªói gi·∫£i m√£ JSON t·ª´ AI. Vui l√≤ng ki·ªÉm tra n·ªôi dung file c√≥ ƒë·ªß th√¥ng tin kh√¥ng.")
        return None
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh tr√≠ch xu·∫•t: {e}")
        return None

# --- H√ÄM 2: X√ÇY D·ª∞NG B·∫¢NG D√íNG TI·ªÄN V√Ä T√çNH CH·ªà S·ªê ---
@st.cache_data
def calculate_metrics(data):
    """X√¢y d·ª±ng d√≤ng ti·ªÅn d·ª± √°n v√† t√≠nh to√°n NPV, IRR, PP, DPP."""
    
    # 1. Tr√≠ch xu·∫•t th√¥ng s·ªë
    I0 = data['initial_investment'] # V·ªën ƒë·∫ßu t∆∞ (Tri·ªáu VNƒê)
    N = data['project_lifespan'] # D√≤ng ƒë·ªùi (NƒÉm)
    Rev = data['annual_revenue'] # Doanh thu (Tri·ªáu VNƒê)
    Cost = data['annual_cost'] # Chi ph√≠ (Tri·ªáu VNƒê)
    WACC = data['wacc'] # T·ª∑ l·ªá chi·∫øt kh·∫•u
    Tax = data['tax_rate'] # Thu·∫ø su·∫•t

    # 2. X√¢y d·ª±ng D√≤ng ti·ªÅn thu·∫ßn (Net Cash Flow - NCF)
    
    # Gi·∫£ ƒë·ªãnh: NCF = (Rev - Cost) * (1 - Tax) (B·ªè qua Kh·∫•u hao, V·ªën lu√¢n chuy·ªÉn, Gi√° tr·ªã thanh l√Ω)
    EBIT = Rev - Cost
    EAT = EBIT * (1 - Tax)
    NCF_annual = EAT # V√¨ kh√¥ng c√≥ Kh·∫•u hao/Thay ƒë·ªïi v·ªën lu√¢n chuy·ªÉn
    
    # T·∫°o m·∫£ng nƒÉm v√† d√≤ng ti·ªÅn
    years = list(range(0, N + 1)) # NƒÉm 0 ƒë·∫øn NƒÉm N
    
    # D√≤ng ti·ªÅn kh·ªüi ƒë·∫ßu (nƒÉm 0)
    cash_flows = [-I0] 
    
    # D√≤ng ti·ªÅn h√†ng nƒÉm (nƒÉm 1 ƒë·∫øn nƒÉm N)
    for _ in range(N):
        cash_flows.append(NCF_annual)
        
    # T·∫°o DataFrame d√≤ng ti·ªÅn
    df = pd.DataFrame({
        'NƒÉm': years,
        'D√≤ng ti·ªÅn thu·∫ßn (NCF)': cash_flows,
    })

    # 3. T√≠nh to√°n c√°c ch·ªâ s·ªë
    
    # a. NPV (Net Present Value)
    npv_value = np.npv(WACC, cash_flows)

    # b. IRR (Internal Rate of Return)
    try:
        irr_value = np.irr(cash_flows)
    except ValueError:
        irr_value = np.nan # Kh√¥ng th·ªÉ t√≠nh n·∫øu d√≤ng ti·ªÅn kh√¥ng ƒë·ªïi d·∫•u

    # c. PP (Payback Period - Th·ªùi gian ho√†n v·ªën)
    cumulative_cf = np.cumsum(cash_flows)
    pp = 0
    for i in range(1, N + 1):
        if cumulative_cf[i] >= 0:
            # Ho√†n v·ªën trong nƒÉm i. T√≠nh th·ªùi gian ch√≠nh x√°c
            pp = i - 1 + abs(cumulative_cf[i-1]) / cash_flows[i]
            break
        elif i == N and cumulative_cf[i] < 0:
            pp = float('inf') # D·ª± √°n kh√¥ng ho√†n v·ªën
            
    # d. DPP (Discounted Payback Period - Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)
    discounted_cf = [cf / (1 + WACC)**t for t, cf in enumerate(cash_flows)]
    cumulative_discounted_cf = np.cumsum(discounted_cf)
    dpp = 0
    for i in range(1, N + 1):
        if cumulative_discounted_cf[i] >= 0:
            dpp = i - 1 + abs(cumulative_discounted_cf[i-1]) / discounted_cf[i]
            break
        elif i == N and cumulative_discounted_cf[i] < 0:
            dpp = float('inf') # D·ª± √°n kh√¥ng ho√†n v·ªën chi·∫øt kh·∫•u
            
    # 4. C·∫≠p nh·∫≠t DataFrame v·ªõi c√°c c·ªôt t√≠nh to√°n
    df['Chi·∫øt kh·∫•u (1/(1+WACC)^t)'] = [1 / (1 + WACC)**t for t in years]
    df['D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)'] = [cf * df['Chi·∫øt kh·∫•u (1/(1+WACC)^t)'][t] for t, cf in enumerate(cash_flows)]
    df['NCF T√≠ch l≈©y'] = cumulative_cf
    df['DCF T√≠ch l≈©y'] = cumulative_discounted_cf

    # L∆∞u k·∫øt qu·∫£ t√≠nh to√°n
    metrics = {
        "NPV": npv_value,
        "IRR": irr_value,
        "PP": pp,
        "DPP": dpp,
        "WACC": WACC,
        "Lifespan": N
    }

    return df, metrics

# --- H√ÄM 3: Y√äU C·∫¶U AI PH√ÇN T√çCH CH·ªà S·ªê ---
def get_ai_evaluation(data_for_ai, metrics, api_key):
    """G·ª≠i c√°c ch·ªâ s·ªë v√† d√≤ng ti·ªÅn ƒë·∫øn Gemini ƒë·ªÉ nh·∫≠n ƒë√°nh gi√° chuy√™n s√¢u."""
    
    # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ g·ª≠i cho AI
    metrics_str = "\n".join([f"{k}: {v:.2f}" if isinstance(v, (int, float)) and not math.isinf(v) and not math.isnan(v) else f"{k}: {v}" for k, v in metrics.items()])
    
    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh ƒë·∫ßu t∆∞. H√£y ph√¢n t√≠ch v√† ƒë√°nh gi√° t√≠nh kh·∫£ thi c·ªßa d·ª± √°n kinh doanh n√†y d·ª±a tr√™n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ sau:

    ---
    TH√îNG S·ªê D·ª∞ √ÅN:
    {data_for_ai}
    
    ---
    C√ÅC CH·ªà S·ªê ƒê√ÅNH GI√Å:
    {metrics_str} (WACC: {metrics['WACC'] * 100:.2f}%, D√≤ng ƒë·ªùi d·ª± √°n: {metrics['Lifespan']} nƒÉm)
    
    ---
    Y√äU C·∫¶U PH√ÇN T√çCH:
    1. NPV: ƒê√°nh gi√° d·ª± √°n c√≥ n√™n ƒë∆∞·ª£c ch·∫•p nh·∫≠n hay kh√¥ng (NPV > 0?).
    2. IRR so v·ªõi WACC: D·ª± √°n c√≥ hi·ªáu qu·∫£ h∆°n chi ph√≠ v·ªën kh√¥ng (IRR > WACC?).
    3. PP & DPP: Nh·∫≠n x√©t v·ªÅ t·ªëc ƒë·ªô thu h·ªìi v·ªën. D·ª± √°n c√≥ r·ªßi ro v·ªÅ thanh kho·∫£n kh√¥ng?
    4. K·∫æT LU·∫¨N: ƒê∆∞a ra k·∫øt lu·∫≠n t·ªïng th·ªÉ v√† khuy·∫øn ngh·ªã r√µ r√†ng (N√™n th·ª±c hi·ªán/Kh√¥ng n√™n th·ª±c hi·ªán).
    
    H√£y tr√¨nh b√†y d∆∞·ªõi d·∫°ng m·ªôt b√†i ph√¢n t√≠ch chuy√™n nghi·ªáp, s√∫c t√≠ch (kho·∫£ng 3-4 ƒëo·∫°n).
    """
    
    try:
        client = genai.Client(api_key=api_key)
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt
        )
        return response.text

    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"


# --- C·∫§U TR√öC ·ª®NG D·ª§NG STREAMLIT ---
api_key = st.secrets.get("GEMINI_API_KEY")

with st.sidebar:
    st.subheader("H∆∞·ªõng D·∫´n")
    st.info("""
    1. **D√°n N·ªôi dung:** Sao ch√©p v√† d√°n to√†n b·ªô n·ªôi dung ph∆∞∆°ng √°n kinh doanh t·ª´ file Word v√†o √¥ b√™n d∆∞·ªõi.
    2. **L·ªçc D·ªØ li·ªáu:** Nh·∫•n n√∫t ƒë·ªÉ AI tr√≠ch xu·∫•t 6 th√¥ng s·ªë t√†i ch√≠nh.
    3. **Ph√¢n t√≠ch:** Xem b·∫£ng d√≤ng ti·ªÅn, c√°c ch·ªâ s·ªë NPV, IRR, PP, DPP v√† nh·∫≠n ph√¢n t√≠ch chuy√™n s√¢u t·ª´ AI.
    """)
    if not api_key:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API 'GEMINI_API_KEY'.")

st.subheader("1. Nh·∫≠p li·ªáu Ph∆∞∆°ng √°n Kinh doanh")
text_content = st.text_area(
    "D√°n n·ªôi dung Ph∆∞∆°ng √°n Kinh doanh (t·ª´ file Word) v√†o ƒë√¢y:", 
    height=300,
    key="plan_content",
    placeholder="V√≠ d·ª•: 'D·ª± √°n n√†y c·∫ßn 500 tri·ªáu VNƒê v·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu, k√©o d√†i 5 nƒÉm. Doanh thu 200 tri·ªáu/nƒÉm, Chi ph√≠ ho·∫°t ƒë·ªông 80 tri·ªáu/nƒÉm. WACC l√† 10% v√† Thu·∫ø TNDN l√† 20%.'"
)

if st.button("üöÄ L·ªçc D·ªØ li·ªáu T√†i ch√≠nh b·∫±ng AI"):
    if not api_key:
        st.error("Vui l√≤ng c·∫•u h√¨nh Kh√≥a API 'GEMINI_API_KEY' trong Streamlit Secrets.")
    elif not text_content:
        st.warning("Vui l√≤ng d√°n n·ªôi dung ph∆∞∆°ng √°n kinh doanh v√†o √¥ nh·∫≠p li·ªáu.")
    else:
        with st.spinner('ƒêang g·ª≠i d·ªØ li·ªáu ƒë·∫øn AI ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng s·ªë...'):
            extracted_data = extract_data_with_ai(text_content, api_key)
            st.session_state.extracted_data = extracted_data
            st.session_state.cash_flow_df = None
            st.session_state.metrics = None
        
        if st.session_state.extracted_data:
            # Sau khi tr√≠ch xu·∫•t th√†nh c√¥ng, t√≠nh to√°n lu√¥n
            df, metrics = calculate_metrics(st.session_state.extracted_data)
            st.session_state.cash_flow_df = df
            st.session_state.metrics = metrics
            st.success("Tr√≠ch xu·∫•t v√† T√≠nh to√°n th√†nh c√¥ng!")
            st.rerun() # Ch·∫°y l·∫°i ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£

# --- HI·ªÇN TH·ªä K·∫æT QU·∫¢ ---

if st.session_state.extracted_data:
    st.subheader("‚úÖ Th√¥ng s·ªë D·ª± √°n ƒë√£ Tr√≠ch xu·∫•t")
    
    data = st.session_state.extracted_data
    
    col1, col2, col3 = st.columns(3)
    col1.metric("V·ªën ƒë·∫ßu t∆∞ (I‚ÇÄ)", f"{data['initial_investment']:,.0f} Tri·ªáu VNƒê")
    col2.metric("D√≤ng ƒë·ªùi D·ª± √°n (N)", f"{data['project_lifespan']} NƒÉm")
    col3.metric("WACC (r)", f"{data['wacc'] * 100:.2f}%")
    
    col4, col5, col6 = st.columns(3)
    col4.metric("Doanh thu H√†ng nƒÉm", f"{data['annual_revenue']:,.0f} Tri·ªáu VNƒê")
    col5.metric("Chi ph√≠ H√†ng nƒÉm", f"{data['annual_cost']:,.0f} Tri·ªáu VNƒê")
    col6.metric("Thu·∫ø su·∫•t", f"{data['tax_rate'] * 100:.0f}%")

# 2. B·∫£ng D√≤ng ti·ªÅn
if st.session_state.cash_flow_df is not None:
    st.subheader("2. B·∫£ng D√≤ng ti·ªÅn D·ª± √°n")
    st.dataframe(
        st.session_state.cash_flow_df.style.format({
            'D√≤ng ti·ªÅn thu·∫ßn (NCF)': '{:,.0f}',
            'Chi·∫øt kh·∫•u (1/(1+WACC)^t)': '{:.4f}',
            'D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)': '{:,.0f}',
            'NCF T√≠ch l≈©y': '{:,.0f}',
            'DCF T√≠ch l≈©y': '{:,.0f}'
        }),
        use_container_width=True,
        hide_index=True
    )

# 3. Ch·ªâ s·ªë ƒê√°nh gi√°
if st.session_state.metrics is not None:
    st.subheader("3. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£")
    metrics = st.session_state.metrics
    
    col1, col2, col3, col4 = st.columns(4)
    
    # H√†m hi·ªÉn th·ªã gi√° tr·ªã PP/DPP
    def format_period(value):
        if math.isinf(value) or math.isnan(value):
            return "Kh√¥ng Ho√†n V·ªën"
        return f"{value:.2f} NƒÉm"
        
    col1.metric("NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)", f"{metrics['NPV']:,.0f} Tri·ªáu VNƒê", delta_color="normal")
    col2.metric("IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô)", f"{metrics['IRR'] * 100:.2f}%" if not math.isnan(metrics['IRR']) else "N/A")
    col3.metric("PP (Th·ªùi gian ho√†n v·ªën)", format_period(metrics['PP']))
    col4.metric("DPP (Ho√†n v·ªën chi·∫øt kh·∫•u)", format_period(metrics['DPP']))

    # 4. Y√™u c·∫ßu AI Ph√¢n t√≠ch
    st.subheader("4. Y√™u c·∫ßu AI Ph√¢n t√≠ch Ch·ªâ s·ªë")
    if st.button("ü§ñ Y√™u c·∫ßu AI Ph√¢n t√≠ch v√† ƒê√°nh gi√° D·ª± √°n"):
        with st.spinner('ƒêang g·ª≠i k·∫øt qu·∫£ t√≠nh to√°n v√† ch·ªù Gemini ph√¢n t√≠ch...'):
            ai_evaluation = get_ai_evaluation(
                text_content, 
                metrics, 
                api_key
            )
            st.markdown("---")
            st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch & Khuy·∫øn ngh·ªã t·ª´ Gemini AI:**")
            st.info(ai_evaluation)

st.markdown("---")
st.caption("L∆∞u √Ω: ·ª®ng d·ª•ng gi·∫£ ƒë·ªãnh Doanh thu v√† Chi ph√≠ kh√¥ng ƒë·ªïi qua c√°c nƒÉm v√† b·ªè qua Kh·∫•u hao, V·ªën l∆∞u ƒë·ªông thay ƒë·ªïi v√† Gi√° tr·ªã thanh l√Ω.")
